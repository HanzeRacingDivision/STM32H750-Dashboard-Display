/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    Background_img.setXY(-266, -200);
    Background_img.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_SHATTERED_RAIN_DARK_ID));
    add(Background_img);

    gauge1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_SMALL_BACKGROUNDS_ACTIVE_PRECISION_ID));
    gauge1.setBackgroundOffset(10, 15);
    gauge1.setPosition(155, 115, 196, 157);
    gauge1.setCenter(100, 120);
    gauge1.setStartEndAngle(-80, 80);
    gauge1.setRange(0, 17000);
    gauge1.setValue(0);
    gauge1.setEasingEquation(touchgfx::EasingEquations::linearEaseIn);
    gauge1.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_NEEDLES_ROUGH_ID, 7.0f, 66.7f);
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(gauge1);

    HRDLogo_img.setBitmap(touchgfx::Bitmap(BITMAP_HARD_LOGO_ID));
    HRDLogo_img.setPosition(-3, 210, 158, 72);
    HRDLogo_img.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    HRDLogo_img.setAlpha(63);
    add(HRDLogo_img);

    STLogo_img.setBitmap(touchgfx::Bitmap(BITMAP_ST_LOGO_BLUE_VERTICAL_ID));
    STLogo_img.setPosition(344, 214, 136, 64);
    STLogo_img.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    STLogo_img.setAlpha(67);
    add(STLogo_img);

    RPM_Text.setPosition(128, -10, 237, 87);
    RPM_Text.setColor(touchgfx::Color::getColorFromRGB(13, 13, 12));
    RPM_Text.setLinespacing(0);
    Unicode::snprintf(RPM_TextBuffer, RPM_TEXT_SIZE, "%s", touchgfx::TypedText(T_RPMTEXTWILDCARD).getText());
    RPM_Text.setWildcard(RPM_TextBuffer);
    RPM_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CHPH));
    add(RPM_Text);

    boxWithBorder1.setPosition(9, 83, 135, 76);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(76, 116, 135));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1.setBorderSize(5);
    add(boxWithBorder1);

    boxWithBorder2.setPosition(334, 83, 135, 76);
    boxWithBorder2.setColor(touchgfx::Color::getColorFromRGB(76, 116, 135));
    boxWithBorder2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder2.setBorderSize(5);
    add(boxWithBorder2);

    textArea1.setPosition(32, 108, 96, 26);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea1.setLinespacing(0);
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T_SPEEDVALUEDISPLAYED).getText());
    textArea1.setWildcard(textArea1Buffer);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A0WS));
    add(textArea1);

    upShiftArrow_Warning.setBitmap(touchgfx::Bitmap(BITMAP_UPSHIFTARROW_WARNING_ID));
    upShiftArrow_Warning.setPosition(377, -2, 35, 60);
    upShiftArrow_Warning.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(upShiftArrow_Warning);

    UpShiftButton.setXY(351, 103);
    UpShiftButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_ACTIVE_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUND_PRESSED_ID));
    UpShiftButton.setAction(buttonCallback);
    add(UpShiftButton);

    textArea2.setXY(365, 108);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T_UPSHIFTTEXT));
    add(textArea2);
}

Screen1ViewBase::~Screen1ViewBase()
{

}

void Screen1ViewBase::setupScreen()
{

}

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &UpShiftButton)
    {
        //upshiftButton
        //When UpShiftButton clicked update value gauge1
        //Update value gauge1 over 0ms time
        gauge1.updateValue(0, 0);
    }
}
