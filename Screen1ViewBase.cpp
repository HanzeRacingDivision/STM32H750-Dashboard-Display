/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    Background_img.setXY(-62, 0);
    Background_img.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_1024X600_SHATTERED_RAIN_DARK_ID));
    add(Background_img);

    HRDLogo_img.setBitmap(touchgfx::Bitmap(BITMAP_HARD_LOGO_ID));
    HRDLogo_img.setPosition(0, 0, 133, 64);
    HRDLogo_img.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(HRDLogo_img);

    STLogo_img.setBitmap(touchgfx::Bitmap(BITMAP_ST_LOGO_BLUE_VERTICAL_ID));
    STLogo_img.setPosition(333, 0, 147, 64);
    STLogo_img.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(STLogo_img);

    gauge1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_CIRCLEPROGRESS_BACKGROUNDS_LARGE_ID));
    gauge1.setBackgroundOffset(10, 15);
    gauge1.setPosition(32, 126, 208, 136);
    gauge1.setCenter(103, 120);
    gauge1.setStartEndAngle(-100, 100);
    gauge1.setRange(0, 100);
    gauge1.setValue(100);
    gauge1.setEasingEquation(touchgfx::EasingEquations::linearEaseIn);
    gauge1.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_MEDIUM_NEEDLES_SMOOTH_ID, 7.0f, 66.7f);
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(gauge1);

    RPM_Text.setPosition(123, 252, 40, 20);
    RPM_Text.setColor(touchgfx::Color::getColorFromRGB(237, 232, 221));
    RPM_Text.setLinespacing(0);
    RPM_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CHPH));
    add(RPM_Text);

    lineProgress1.setXY(350, 72);
    lineProgress1.setProgressIndicatorPosition(0, 0, 24, 200);
    lineProgress1.setRange(0, 100);
    lineProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_BACKGROUNDS_IMAGE_STYLED_THERMOMETERS_THERMOMETER_SMALL_90_ID));
    lineProgress1Painter.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_FILLERS_STYLED_THERMOMETERS_THERMOMETER_SMALL_ACTIVE_90_ID));
    lineProgress1.setPainter(lineProgress1Painter);
    lineProgress1.setStart(12, 200);
    lineProgress1.setEnd(12, 0);
    lineProgress1.setLineWidth(24);
    lineProgress1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    lineProgress1.setValue(60);
    add(lineProgress1);

    lineProgress2.setXY(418, 72);
    lineProgress2.setProgressIndicatorPosition(0, 0, 24, 200);
    lineProgress2.setRange(0, 100);
    lineProgress2.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_BACKGROUNDS_IMAGE_STYLED_THERMOMETERS_THERMOMETER_SMALL_90_ID));
    lineProgress2Painter.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_LINEPROGRESS_FILLERS_STYLED_THERMOMETERS_THERMOMETER_SMALL_ACTIVE_90_ID));
    lineProgress2.setPainter(lineProgress2Painter);
    lineProgress2.setStart(12, 200);
    lineProgress2.setEnd(12, 0);
    lineProgress2.setLineWidth(24);
    lineProgress2.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    lineProgress2.setValue(80);
    add(lineProgress2);

    boxWithBorder1.setPosition(185, 72, 135, 76);
    boxWithBorder1.setColor(touchgfx::Color::getColorFromRGB(76, 116, 135));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    boxWithBorder1.setBorderSize(5);
    add(boxWithBorder1);

    textArea1.setXY(216, 99);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea1.setLinespacing(0);
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T_SPEEDVALUEDISPLAYED).getText());
    textArea1.setWildcard(textArea1Buffer);
    textArea1.resizeToCurrentText();
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A0WS));
    add(textArea1);

    LeakingOil_Warning.setBitmap(touchgfx::Bitmap(BITMAP_LEAKINGOIL_WARNING_ID));
    LeakingOil_Warning.setPosition(166, 0, 50, 41);
    LeakingOil_Warning.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(LeakingOil_Warning);

    EngTemp_Warning.setBitmap(touchgfx::Bitmap(BITMAP_ENGINETEMP_WARNING_ID));
    EngTemp_Warning.setPosition(430, 72, 63, 65);
    EngTemp_Warning.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(EngTemp_Warning);

    TirePressure_Warning.setBitmap(touchgfx::Bitmap(BITMAP_TIREPRESSURE_WARNING_ID));
    TirePressure_Warning.setPosition(239, 0, 50, 41);
    TirePressure_Warning.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    add(TirePressure_Warning);

    upShiftArrow_Warning.setBitmap(touchgfx::Bitmap(BITMAP_UPSHIFTARROW_WARNING_ID));
    upShiftArrow_Warning.setPosition(124, 177, 25, 35);
    upShiftArrow_Warning.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
    upShiftArrow_Warning.setVisible(false);
    add(upShiftArrow_Warning);
}

Screen1ViewBase::~Screen1ViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{

}
